#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QString>
#include <QFile>
#include <pthread.h>
#include <syscall.h>
#include <QDir>
#include <QTextStream>
#include <QDebug>
#include <QProcess>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <dirent.h>
#include <sys/resource.h>
#include <unistd.h>
#include <limits>

QVector<pid_t> tids;
QVector<pthread_t> threads;
QVector<QString> lines;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}
struct MyParentThreadData {
    int threadCount;
    QString SyncType;
    // Додайте інші параметри, які вам потрібні
};

struct ThreadData {
    int startLine;
    int endLine;
};

void * FindMinWordNone(void* args)
{
    ThreadData* data = static_cast<ThreadData*>(args);
    int startLine = data->startLine;
    int endLine = data->endLine;

    for (int i = startLine; i < endLine; ++i) {
        const QString& line = lines[i];

        QStringList words = line.split(' ', Qt::SkipEmptyParts);

        QString minWord;
        int minWordLength = INT_MAX;

        for (const QString& word : words) {
            if (word.length() < minWordLength) {
                minWord = word;
                minWordLength = word.length();
            }
        }

//        QTextStream out(stdout);
//        out  << "TID " <<  syscall(SYS_gettid)<< "\n";
//        out << "Line: " << i + 1 << "\n";
//        out << "Min Word: " << minWord << "\n";
//        out << "-----------------\n";

        // Виведення результатів у файл
        QFile outputFile(QString("/home/taras-kvyk/Lab6/thread.txt").arg(syscall(SYS_gettid)));
        if (outputFile.open(QIODevice::Append | QIODevice::Text)) {
            QTextStream out(&outputFile);
            out << "Line: " << i + 1 << "\n";
            out << "Min Word: " << minWord << "\n";
            out << "-----------------\n";
            outputFile.close();
        }
    }

}

void* ThreadFunc(void* args) {
    MyParentThreadData* data = static_cast<MyParentThreadData*>(args);

    QString filePath = "/home/taras-kvyk/Lab6/source.txt";

    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qCritical() << "Failed to open file:" << filePath;
    }

    lines.clear();
    QTextStream in(&file);
    while (!in.atEnd()) {
        QString line = in.readLine();
        lines.append(line);
    }

    file.close();

    int threadCount = data->threadCount;

    if(data->SyncType == "None")
    {
        for (int j = 0; j < threadCount; j++) {
            int numLinesPerThread = lines.size() / threadCount;
            int startLine = j * numLinesPerThread;
            int endLine = (j == threadCount - 1) ? lines.size() : startLine + numLinesPerThread;

            ThreadData* data = new ThreadData;
            data->startLine = startLine;
            data->endLine = endLine;

            pthread_t threadHandle;
            pthread_create(&threadHandle, nullptr, FindMinWordNone, data);
            tids.push_back(threadHandle);
            threads.push_back(threadHandle);
        }

    }
    else  if(data->SyncType == "Bariers")
    {

    }
    else  if(data->SyncType == "Cond. Variables")
    // Ваш код

    delete data;
    return nullptr;
}

class ThreadInfo {
public:
    int TID;
    std::string Name;
    int Nice;
    int Priority;
    std::string State;
    long CPULoad;
};

ThreadInfo GetThreadInfo(int processId, int threadId);

void MainWindow::on_RunBtn_clicked() {
    ThreadInfo info = GetThreadInfo(getpid(), gettid());
    bool isValid;
    int threadCount = ui->ThreadCountComboBox->currentText().toInt(&isValid);
    if (!isValid)
        return;

    MyParentThreadData* data = new MyParentThreadData;
    data->threadCount = threadCount;
    data->SyncType = ui->SynchTypeComboBox->currentText();

    pthread_t thread;
    int result = pthread_create(&thread, nullptr, ThreadFunc, data);

    if (result != 0) {
        qCritical() << "Failed to create thread";
        delete data; // Звільнення пам'яті в разі помилки
    }
}




void MainWindow::on_DetachBtn_clicked()
{

}


void MainWindow::on_CancelBtn_clicked()
{

}


void MainWindow::on_ReniceBtn_clicked()
{

}


void MainWindow::on_AffinityBtn_clicked()
{

}


ThreadInfo GetThreadInfo(int pid, int tid) {
    std::string procPath = "/proc/" + std::to_string(pid) + "/task/" + std::to_string(tid);
    ThreadInfo threadInfo;

    try {
        // Read thread name from status file
        std::ifstream statusFile(procPath + "/status");
        std::string line;
        while (std::getline(statusFile, line)) {
            if (line.find("Name:") == 0) {
                std::istringstream iss(line);
                std::string name;
                iss >> name >> std::ws;
                std::getline(iss, threadInfo.Name);
                break;
            }
        }

        // Read other thread information from stat file
        std::ifstream statFile(procPath + "/stat");
        std::string statContent;
        std::getline(statFile, statContent);
        statFile.close();

        std::istringstream statStream(statContent);
        statStream >> threadInfo.TID >> threadInfo.Name >> threadInfo.State;

        // Get thread priority
        std::string statPath = procPath + "/stat";
        statFile.open(statPath);
        std::string statLine;
        while (std::getline(statFile, statLine)) {
            if (statLine.find(") ") != std::string::npos) {
                std::istringstream iss(statLine.substr(statLine.find(") ") + 2));
                int nice, priority;
                for (int i = 0; i < 15; ++i) {
                    iss.ignore(std::numeric_limits<std::streamsize>::max(), ' ');
                }
                iss >> priority >> nice;
                threadInfo.Nice = nice;
                threadInfo.Priority = priority;
                break;
            }
        }
        statFile.close();

        // Get thread CPU time
        statFile.open(procPath + "/stat");
        if (!statFile.is_open()) {
            std::cerr << "Error opening stat file for thread " << tid << std::endl;
            return threadInfo;
        }

        std::getline(statFile, statContent);
        statFile.close();

        std::istringstream statTimeStream(statContent);
        long utime, stime, cutime, cstime;
        for (int i = 0; i < 13; ++i) {
            while (statTimeStream.get() != ' ');
        }
        statTimeStream >> utime >> stime >> cutime >> cstime;
        long clockTicksPerSecond = sysconf(_SC_CLK_TCK);
        long totalTime = utime + stime + cutime + cstime;
        double totalTimeMilliseconds = (totalTime) * 1000.0 / clockTicksPerSecond;
        threadInfo.CPULoad = static_cast<int>(totalTimeMilliseconds);
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return threadInfo;
}
